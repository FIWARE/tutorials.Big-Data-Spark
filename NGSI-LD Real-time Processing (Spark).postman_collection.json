{
	"info": {
		"_postman_id": "08c0bb83-20cc-41ec-81be-2a7e2304f0e8",
		"name": "NGSI-LD Real-time Processing (Spark)",
		"description": "This tutorial is an introduction to the [FIWARE Cosmos Orion Spark Connector](http://fiware-cosmos-spark.rtfd.io), which\nenables easier Big Data analysis over context, integrated with one of the most popular BigData platforms:\n[Apache Spark](https://spark.apache.org/). Apache Spark is a framework and distributed processing engine for stateful\ncomputations over unbounded and bounded data streams. Spark has been designed to run in all common cluster environments,\nperform computations at in-memory speed and at any scale.\n\nThe `docker-compose` file for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Big-Data-Flink/icon/GitHub-Mark-32px.png) [FIWARE-LD 305: Big Data Analysis (Flink) ](https://github.com/FIWARE/tutorials.Big-Data-Flink)\n\n# Real-time Processing and Big Data Analysis\n\n> \"You have to find what sparks a light in you so that you in your own way can illuminate the world.\"\n>\n> — Oprah Winfrey\n\nSmart solutions based on FIWARE are architecturally designed around microservices. They are therefore are designed to\nscale-up from simple applications (such as the Supermarket tutorial) through to city-wide installations base on a large\narray of IoT sensors and other context data providers.\n\nThe massive amount of data involved eventually becomes too much for a single machine to analyse, process and store, and\ntherefore the work must be delegated to additional distributed services. These distributed systems form the basis of\nso-called **Big Data Analysis**. The distribution of tasks allows developers to be able to extract insights from huge\ndata sets which would be too complex to be dealt with using traditional methods. and uncover hidden patterns and\ncorrelations.\n\nAs we have seen, context data is core to any Smart Solution, and the Context Broker is able to monitor changes of state\nand raise [subscription events](https://github.com/Fiware/tutorials.Subscriptions) as the context changes. For smaller\ninstallations, each subscription event can be processed one-by-one by a single receiving endpoint, however as the system\ngrows, another technique will be required to avoid overwhelming the listener, potentially blocking resources and missing\nupdates.\n\n**Apache Spark** is an open-source distributed general-purpose cluster-computing framework. It provides an interface for\nprogramming entire clusters with implicit data parallelism and fault tolerance. The **Cosmos Spark** connector allows\ndevelopers write custom business logic to listen for context data subscription events and then process the flow of the\ncontext data. Spark is able to delegate these actions to other workers where they will be acted upon either in\nsequentially or in parallel as required. The data flow processing itself can be arbitrarily complex.\n\nObviously, in reality, our existing Supermarket scenario is far too small to require the use of a Big Data solution, but\nwill serve as a basis for demonstrating the type of real-time processing which may be required in a larger solution\nwhich is processing a continuous stream of context-data events.\n\n# Architecture\n\nThis application builds on the components and dummy IoT devices created in\n[previous tutorials](https://github.com/FIWARE/tutorials.IoT-Agent/). It will make use of three FIWARE components - the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/), the\n[IoT Agent for Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/), and the\n[Cosmos Orion Spark Connector](https://fiware-cosmos-spark.readthedocs.io/en/latest/) for connecting Orion to an\n[Apache Spark cluster](https://spark.apache.org/docs/latest/cluster-overview.html). The Spark cluster itself will\nconsist of a single **Cluster Manager** _master_ to coordinate execution and some **Worker Nodes** _worker_ to execute\nthe tasks.\n\nBoth the Orion Context Broker and the IoT Agent rely on open source [MongoDB](https://www.mongodb.com/) technology to\nkeep persistence of the information they hold. We will also be using the dummy IoT devices created in the\n[previous tutorial](https://github.com/FIWARE/tutorials.IoT-Agent/).\n\nTherefore the overall architecture will consist of the following elements:\n\n-   Two **FIWARE Generic Enablers** as independent microservices:\n    -   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n        [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n    -   The FIWARE [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/) which will\n        receive southbound requests using\n        [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n        and convert them to\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        commands for the devices\n-   An [Apache Spark cluster](https://spark.apache.org/docs/latest/cluster-overview.html) consisting of a single\n    **ClusterManager** and **Worker Nodes**\n    -   The FIWARE [Cosmos Orion Spark Connector](https://fiware-cosmos-spark.readthedocs.io/en/latest/) will be\n        deployed as part of the dataflow which will subscribe to context changes and make operations on them in\n        real-time\n-   One [MongoDB](https://www.mongodb.com/) **database** :\n    -   Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and\n        registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs and Keys\n-   The **Tutorial Application** does the following:\n    -   Offers static `@context` files defining the context entities within the system.\n    -   Acts as set of dummy [agricultural IoT devices](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD)\n        using the\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n\nThe overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Big-Data-Spark/img/Tutorial%20FIWARE%20Spark.png)\n\n## Spark Cluster Configuration\n\n```yaml\nspark-master:\n    image: bde2020/spark-master:2.4.5-hadoop2.7\n    container_name: spark-master\n    expose:\n        - \"8080\"\n        - \"9001\"\n    ports:\n        - \"8080:8080\"\n        - \"7077:7077\"\n        - \"9001:9001\"\n    environment:\n        - INIT_DAEMON_STEP=setup_spark\n        - \"constraint:node==spark-master\"\n```\n\n```yaml\nspark-worker-1:\n    image: bde2020/spark-worker:2.4.5-hadoop2.7\n    container_name: spark-worker-1\n    depends_on:\n        - spark-master\n    ports:\n        - \"8081:8081\"\n    environment:\n        - \"SPARK_MASTER=spark://spark-master:7077\"\n        - \"constraint:node==spark-master\"\n```\n\nThe `spark-master` container is listening on three ports:\n\n-   Port `8080` is exposed so we can see the web frontend of the Apache Spark-Master Dashboard.\n-   Port `7070` is used for internal communications.\n\nThe `spark-worker-1` container is listening on one port:\n\n-   Port `9001` is exposed so that the installation can receive context data subscriptions.\n-   Ports `8081` is exposed so we can see the web frontend of the Apache Spark-Worker-1 Dashboard.\n\n# Start Up\n\nBefore you start, you should ensure that you have obtained or built the necessary Docker images locally. Please clone\nthe repository and create the necessary images by running the commands shown below. Note that you might need to run some\nof the commands as a privileged user:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.Big-Data-Flink.git\ncd tutorials.Big-Data-Flink\ngit checkout NGSI-LD\n./services create\n```\n\nThis command will also import seed data from the previous tutorials and provision the dummy IoT sensors on startup.\n\nTo start the system, run the following command:\n\n```console\n./services start\n```\n\n> :information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# Real-time Processing Operations\n\nAccording to the [Apache Spark documentation](https://spark.apache.org/documentation.html), Spark Streaming is an\nextension of the core Spark API that enables scalable, high-throughput, fault-tolerant stream processing of live data\nstreams. Data can be ingested from many sources like Kafka, Flume, Kinesis, or TCP sockets, and can be processed using\ncomplex algorithms expressed with high-level functions like map, reduce, join and window. Finally, processed data can be\npushed out to filesystems, databases, and live dashboards. In fact, you can apply Spark’s machine learning and graph\nprocessing algorithms on data streams.\n\n![](https://spark.apache.org/docs/latest/img/streaming-arch.png)\n\nInternally, it works as follows. Spark Streaming receives live input data streams and divides the data into batches,\nwhich are then processed by the Spark engine to generate the final stream of results in batches.\n\n![](https://spark.apache.org/docs/latest/img/streaming-flow.png)\n\nThis means that to create a streaming data flow we must supply the following:\n\n-   A mechanism for reading Context data as a **Source Operator**\n-   Business logic to define the transform operations\n-   A mechanism for pushing Context data back to the context broker as a **Sink Operator**\n\nThe **Cosmos Spark** connector - `orion.spark.connector-1.2.2.jar` offers both **Source** and **Sink** operators. It\ntherefore only remains to write the necessary Scala code to connect the streaming dataflow pipeline operations together.\nThe processing code can be complied into a JAR file which can be uploaded to the spark cluster. Two examples will be\ndetailed below, all the source code for this tutorial can be found within the\n[cosmos-examples](https://github.com/ging/fiware-cosmos-orion-spark-connector-tutorial/tree/master/cosmos-examples)\ndirectory.\n\nFurther Spark processing examples can be found on\n[Spark Connector Examples](https://fiware-cosmos-spark-examples.readthedocs.io/).\n\n### Compiling a JAR file for Spark\n\nAn existing `pom.xml` file has been created which holds the necessary prerequisites to build the examples JAR file\n\nIn order to use the Orion Spark Connector we first need to manually install the connector JAR as an artifact using\nMaven:\n\n```console\ncd cosmos-examples\ncurl -LO https://github.com/ging/fiware-cosmos-orion-spark-connector/releases/download/FIWARE_7.9.1/orion.spark.connector-1.2.2.jar\nmvn install:install-file \\\n  -Dfile=./orion.spark.connector-1.2.2.jar \\\n  -DgroupId=org.fiware.cosmos \\\n  -DartifactId=orion.spark.connector \\\n  -Dversion=1.2.2 \\\n  -Dpackaging=jar\n```\n\nThereafter the source code can be compiled by running the `mvn package` command within the same directory\n(`cosmos-examples`):\n\n```console\nmvn package\n```\n\nA new JAR file called `cosmos-examples-1.2.2.jar` will be created within the `cosmos-examples/target` directory.\n\n### Generating a stream of Context Data\n\nFor the purpose of this tutorial, we must be monitoring a system in which the context is periodically being updated. The\ndummy IoT Sensors can be used to do this. Open the device monitor page at `http://localhost:3000/device/monitor` and\nstart a tractor moving. This can be done by selecting an appropriate the command from\nthe drop down list and pressing the `send` button. The stream of measurements coming from the devices can then be seen\non the same page:\n\n![](https://fiware.github.io/tutorials.Big-Data-Spark/img/farm-devices.gif)\n\n## Logger - Reading Context Data Streams\n\nThe first example makes use of the `OrionReceiver` operator in order to receive notifications from the Orion Context\nBroker. Specifically, the example counts the number notifications that each type of device sends in one minute. You can\nfind the source code of the example in\n[org/fiware/cosmos/tutorial/Logger.scala](https://github.com/ging/fiware-cosmos-orion-spark-connector-tutorial/blob/master/cosmos-examples/src/main/scala/org/fiware/cosmos/tutorial/Logger.scala)\n\n### Logger - Installing the JAR\n\nRestart the containers if necessary, then access the worker container:\n\n```console\ndocker exec -it spark-worker-1 bin/bash\n```\n\nAnd run the following command to run the generated JAR package in the Spark cluster:\n\n```console\n/spark/bin/spark-submit \\\n--class  org.fiware.cosmos.tutorial.LoggerLD \\\n--master  spark://spark-master:7077 \\\n--deploy-mode client /home/cosmos-examples/target/cosmos-examples-1.2.2.jar \\\n--conf \"spark.driver.extraJavaOptions=-Dlog4jspark.root.logger=WARN,console\"\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Receiving context data and performing operations",
			"item": [
				{
					"name": "Orion - Subscribe to Context Changes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "NGSILD-Path",
								"value": "/",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Flink of all animal and farm vehicle movements\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"Tractor\"}, {\"type\": \"Device\"}],\n  \"watchedAttributes\": [\"location\"],\n  \"notification\": {\n    \"attributes\": [\"location\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://taskmanager:9001\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/user-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "Once a dynamic context system is up and running (we have deployed the `Logger` job in the Spark cluster), we need to\ninform **Spark** of changes in context.\n\nThis is done by making a POST request to the `/ngsi-ld/v1/subscriptions` endpoint of the Orion Context Broker.\n\n-   The `NGSILD-Tenant` header is used to filter the subscription to only listen to\n    measurements from the attached IoT Sensors, since they had been provisioned using these settings\n\n-   The notification `uri` must match the one our Flink program is listening to.\n\n-   The `throttling` value defines the rate that changes are sampled.\n\nThe response will be **`201 - Created`**"
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "NGSILD-Path",
								"value": "/",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "If a subscription has been created, we can check to see if it is firing by making a GET request to the\n`/ngsi-ld/v1/subscriptions/` endpoint.Within the `notification` section of the response, you can see several additional `attributes` which describe the health\nof the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`. A zero value would indicate\nthat the `subject` of the subscription is incorrect or the subscription has created with the wrong `fiware-service-path`\nor `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices are not regularly\nsending data. Remember to activate the smart farm by moving a **Tractor**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case then **Cosmos** is not receiving\nthe subscription properly. Check that the hostname and port are correct.\n\nFinally, check that the `status` of the subscription is `active` - an expired subscription will not fire.\n\n"
					},
					"response": []
				}
			],
			"description": "The first example makes use of the `OrionReceiver` operator in order to receive notifications from the Orion Context\nBroker. Specifically, the example counts the number notifications that each type of device sends in one minute. You can\nfind the source code of the example in\n[org/fiware/cosmos/tutorial/Logger.scala](https://github.com/ging/fiware-cosmos-orion-spark-connector-tutorial/blob/master/cosmos-examples/src/main/scala/org/fiware/cosmos/tutorial/Logger.scala)\n\n### Logger - Installing the JAR\n\nRestart the containers if necessary, then access the worker container:\n\n```console\ndocker exec -it spark-worker-1 bin/bash\n```\n\nAnd run the following command to run the generated JAR package in the Spark cluster:\n\n```console\n/spark/bin/spark-submit \\\n--class  org.fiware.cosmos.tutorial.LoggerLD \\\n--master  spark://spark-master:7077 \\\n--deploy-mode client /home/cosmos-examples/target/cosmos-examples-1.2.2.jar \\\n--conf \"spark.driver.extraJavaOptions=-Dlog4jspark.root.logger=WARN,console\"\n```\n\n### Logger - Checking the Output\n\nLeave the subscription running for **one minute**. Then, the output on the console on which you ran the Spark job will\nbe like the following:\n\n```text\nSensor(Tractor,19)\nSensor(Device,49)\n```\n\n### Logger - Analyzing the Code\n\n```scala\npackage org.fiware.cosmos.tutorial\nimport org.apache.spark._\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.fiware.cosmos.orion.spark.connector._\n\n\nobject LoggerLD{\n\n  def main(args: Array[String]): Unit = {\n\n    val conf = new SparkConf().setAppName(\"Example 1\")\n    val ssc = new StreamingContext(conf, Seconds(60))\n    // Create Orion Receiver. Receive notifications on port 9001\n    val eventStream = ssc.receiverStream(new NGSILDReceiver(9001))\n\n    // Process event stream\n    eventStream\n      .flatMap(event => event.entities)\n      .map(ent => {\n        new Sensor(ent.`type`)\n      })\n      .countByValue()\n      .window(Seconds(60))\n      .print()\n\n\n    ssc.start()\n    ssc.awaitTermination()\n  }\n  case class Sensor(device: String)\n}\n```\n\nThe first lines of the program are aimed at importing the necessary dependencies, including the connector. The next step\nis to create an instance of the `NGSILDReceiver` using the class provided by the connector and to add it to the\nenvironment provided by Spark.\n\nThe `NGSILDReceiver` constructor accepts a port number (`9001`) as a parameter. This port is used to listen to the\nsubscription notifications coming from Orion and converted to a `DataStream` of `NgsiEvent` objects. The definition of\nthese objects can be found within the\n[Orion-Spark Connector documentation](https://github.com/ging/fiware-cosmos-orion-spark-connector/blob/master/README.md#orionreceiver).\n\nThe stream processing consists of five separate steps. The first step (`flatMap()`) is performed in order to put\ntogether the entity objects of all the NGSI Events received in a period of time. Thereafter the code iterates over them\n(with the `map()` operation) and extracts the desired attributes. In this case, we are interested in the sensor `type`\n(`Device` or `Tractor`).\n\nWithin each iteration, we create a custom object with the property we need: the sensor `type`. For this purpose, we can\ndefine a case class as shown:\n\n```scala\ncase class Sensor(device: String)\n```\n\nThereafter can count the created objects by the type of device (`countByValue()`) and perform operations such as\n`window()` on them.\n\nAfter the processing, the results are output to the console:\n\n```scala\nprocessedDataStream.print()\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Receiving context data, performing operations and persisting context data",
			"item": [
				{
					"name": "Orion - Subscribe to Context Changes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "NGSILD-Path",
								"value": "/",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "'{\n  \"description\": \"Notify Flink of changes of Soil Humidity\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"SoilSensor\"}],\n  \"watchedAttributes\": [\"humidity\"],\n  \"notification\": {\n    \"attributes\": [\"humidity\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://flink-taskmanager:9001\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context/user-context.jsonld\"\n}'"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "A new subscription needs to be set up to run this example. The subscription is listening to changes of context on the soil humidity sensor."
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "If a subscription has been created, we can check to see if it is firing by making a GET request to the\n`/ngsi-ld/v1/subscriptions/` endpoint."
					},
					"response": []
				},
				{
					"name": "Orion - Delete Subscription",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/{{subscriptionId}}",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								"{{subscriptionId}}"
							]
						},
						"description": "If necessary an old subscription can be deleted by referencing its subscription id."
					},
					"response": []
				}
			],
			"description": "The second example turns on a water faucet when the soil humidity is too low and turns it back off it when the soil humidity it is back to normal levels. This way, the soil humidity is always kept at an adequate level.\n\nThe dataflow stream uses the `NGSILDReceiver` operator in order to receive notifications and filters the input to only respond to motion senseors and then uses the `NGSILDSink` to push processed context back to the Context Broker. You can find the source code of the example in\n[org/fiware/cosmos/tutorial/FeedbackLD.scala](https://github.com/ging/fiware-cosmos-orion-spark-connector-tutorial/blob/master/cosmos-examples/src/main/scala/org/fiware/cosmos/tutorial/FeedbackLD.scala)\n\n### Feedback Loop - Installing the JAR\n\n```console\n/spark/bin/spark-submit  \\\n--class  org.fiware.cosmos.tutorial.FeedbackLD \\\n--master  spark://spark-master:7077 \\\n--deploy-mode client /home/cosmos-examples/target/cosmos-examples-1.2.2.jar \\\n--conf \"spark.driver.extraJavaOptions=-Dlog4jspark.root.logger=WARN,console\"\n```\n\n### Feedback Loop - Checking the Output\n\nGo to `http://localhost:3000/device/monitor`\n\nRaise the temperature in Farm001 and wait until the humidity value is below 35, then the water faucet will be automatically turned on to increase the soil humidity. When the humidity rises above 50, the water faucet will be turned off automatically as well.\n\n### Feedback Loop - Analyzing the Code\n\n```scala\npackage org.fiware.cosmos.tutorial\n\nimport org.apache.spark._\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.fiware.cosmos.orion.spark.connector._\n\nobject FeedbackLD {\n  final val CONTENT_TYPE = ContentType.JSON\n  final val METHOD = HTTPMethod.PATCH\n  final val CONTENT = \"{\\n  \\\"type\\\" : \\\"Property\\\",\\n  \\\"value\\\" : \\\" \\\" \\n}\"\n  final val HEADERS = Map(\n    \"NGSILD-Tenant\" -> \"openiot\",\n    \"Link\" -> \"<http://context/user-context.jsonld>; rel=\\\"http://www.w3.org/ns/json-ld#context\\\"; type=\\\"application/ld+json\\\"\"\n  )\n  final val LOW_THRESHOLD = 35\n  final val HIGH_THRESHOLD = 50\n  def main(args: Array[String]): Unit = {\n\n    val conf = new SparkConf().setAppName(\"Feedback\")\n    val ssc = new StreamingContext(conf, Seconds(10))\n\n    // Create Orion Receiver. Receive notifications on port 9001\n    val eventStream = ssc.receiverStream(new NGSILDReceiver(9001))\n\n    // Process event stream\n    val processedDataStream = eventStream.flatMap(event => event.entities)\n      .filter(ent => ent.`type` == \"SoilSensor\")\n\n    /* High humidity */\n    val highHumidity = processedDataStream\n      .filter(ent =>  (ent.attrs(\"humidity\") != null) && (ent.attrs(\"humidity\")(\"value\").asInstanceOf[BigInt] > HIGH_THRESHOLD))\n      .map(ent => (ent.id,ent.attrs(\"humidity\")(\"value\")))\n\n    val highSinkStream= highHumidity.map(sensor => {\n      OrionSinkObject(CONTENT,\"http://orion:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water\"+sensor._1.takeRight(3)+\"/attrs/off\",CONTENT_TYPE,METHOD,HEADERS)\n    })\n\n    highHumidity.map(sensor => \"Sensor\" + sensor._1 + \" has detected a humidity level above \" + HIGH_THRESHOLD + \". Turning off water faucet!\").print()\n    OrionSink.addSink( highSinkStream )\n\n\n    /* Low humidity */\n    val lowHumidity = processedDataStream\n      .filter(ent => (ent.attrs(\"humidity\") != null) && (ent.attrs(\"humidity\")(\"value\").asInstanceOf[BigInt] < LOW_THRESHOLD))\n      .map(ent => (ent.id,ent.attrs(\"humidity\")(\"value\")))\n\n    val lowSinkStream= lowHumidity.map(sensor => {\n      OrionSinkObject(CONTENT,\"http://orion:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water\"+sensor._1.takeRight(3)+\"/attrs/on\",CONTENT_TYPE,METHOD,HEADERS)\n    })\n\n    lowHumidity.map(sensor => \"Sensor\" + sensor._1 + \" has detected a humidity level below \" + LOW_THRESHOLD + \". Turning on water faucet!\").print()\n    OrionSink.addSink( lowSinkStream )\n\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n```\n\nAs you can see, it is similar to the previous example. The main difference is that it writes the processed data back in the Context Broker through the **`OrionSink`**.\n\nThe arguments of the **`OrionSinkObject`** are:\n\n-   **Message**: `\"{\\n  \\\"type\\\" : \\\"Property\\\",\\n  \\\"value\\\" : \\\" \\\" \\n}\"`.\n-   **URL**: `\"http://orion:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water\"+sensor._1.takeRight(3)+\"/attrs/on\"` or `\"http://orion:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water\"+sensor._1.takeRight(3)+\"/attrs/off\"`, depending on whether we are turning on or off the water faucet. TakeRight(3) gets the number of\n    the sensor, for example '001'.\n-   **Content Type**: `ContentType.JSON`.\n-   **HTTP Method**: `HTTPMethod.PATCH`.\n-   **Headers**: `Map(\"NGSILD-Tenant\" -> \"openiot\", \"Link\" -> \"<http://context/user-context.jsonld>; rel=\\\"http://www.w3.org/ns/json-ld#context\\\"; type=\\\"application/ld+json\\\"\" )`.\n    We add the headers we need in the HTTP Request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "subscriptionId",
			"value": "5e134a0c924f6d7d27b63844"
		}
	]
}